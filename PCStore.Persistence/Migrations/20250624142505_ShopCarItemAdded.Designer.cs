// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PCStore.Persistence.Context;

#nullable disable

namespace PCStore.Persistence.Migrations
{
    [DbContext(typeof(ProjectDbContext))]
    [Migration("20250624142505_ShopCarItemAdded")]
    partial class ShopCarItemAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PCStore.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BuildingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Floor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<int>("AnswerCommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AnswerDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AnswerDownVoteCount")
                        .HasColumnType("int");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AnswerUpVoteCount")
                        .HasColumnType("int");

                    b.Property<string>("AnswerUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AnswerId");

                    b.HasIndex("AnswerCommentId");

                    b.HasIndex("AnswerUserId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.AnswerVote", b =>
                {
                    b.Property<int>("AnswerVoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerVoteId"));

                    b.Property<int>("AnswerVoteAnswerId")
                        .HasColumnType("int");

                    b.Property<string>("AnswerVoteUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AnswerVoteValue")
                        .HasColumnType("int");

                    b.HasKey("AnswerVoteId");

                    b.HasIndex("AnswerVoteAnswerId");

                    b.HasIndex("AnswerVoteUserId");

                    b.ToTable("AnswerVotes");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.AttributeDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AttributeDefinitions");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int>("CommentAnswerCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CommentDownVoteCount")
                        .HasColumnType("int");

                    b.Property<bool>("CommentIsQuestion")
                        .HasColumnType("bit");

                    b.Property<int>("CommentProductId")
                        .HasColumnType("int");

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CommentUpVoteCount")
                        .HasColumnType("int");

                    b.Property<string>("CommentUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CommentId");

                    b.HasIndex("CommentProductId");

                    b.HasIndex("CommentUserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.CommentVote", b =>
                {
                    b.Property<int>("CommentVoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentVoteId"));

                    b.Property<int>("CommentVoteCommentId")
                        .HasColumnType("int");

                    b.Property<string>("CommentVoteUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CommentVoteValue")
                        .HasColumnType("int");

                    b.HasKey("CommentVoteId");

                    b.HasIndex("CommentVoteCommentId");

                    b.HasIndex("CommentVoteUserId");

                    b.ToTable("CommentVotes");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.Coupon", b =>
                {
                    b.Property<int>("CouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CouponId"));

                    b.Property<DateTime>("CouponEndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("CouponIsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("CouponIsPercentage")
                        .HasColumnType("bit");

                    b.Property<int>("CouponMaxUsage")
                        .HasColumnType("int");

                    b.Property<int>("CouponMaxUsagePerUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("CouponStartTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CouponValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CouponId");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.CouponUsage", b =>
                {
                    b.Property<int>("CouponUsageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CouponUsageId"));

                    b.Property<int>("CouponUsageCouponId")
                        .HasColumnType("int");

                    b.Property<int>("CouponUsageOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CouponUsageTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CouponUsageUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CouponUsageId");

                    b.HasIndex("CouponUsageCouponId");

                    b.HasIndex("CouponUsageOrderId")
                        .IsUnique();

                    b.HasIndex("CouponUsageUserId");

                    b.ToTable("CouponUsages");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"));

                    b.Property<DateTime>("DiscountEndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DiscountIsActive")
                        .HasColumnType("bit");

                    b.Property<int>("DiscountProductId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountRateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DiscountStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DiscountId");

                    b.HasIndex("DiscountProductId");

                    b.HasIndex("DiscountRateId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.DiscountRate", b =>
                {
                    b.Property<int>("DiscountRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountRateId"));

                    b.Property<decimal>("DiscountRateNumber")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DiscountRateId");

                    b.ToTable("DiscountRates");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.FollowedProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("FollowedProducts");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("NotificationContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NotificationStatus")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<string>("NotificationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NotificationId");

                    b.HasIndex("NotificationUserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("OrderAddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OrderDeliverDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("OrderIsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("OrderTotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OrderUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("AddressId");

                    b.HasIndex("OrderUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.OrderProductList", b =>
                {
                    b.Property<int>("ListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ListId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte>("ProductQuantity")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("ProductTotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ListId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProductLists");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.OrderStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusNameId")
                        .HasColumnType("int");

                    b.HasKey("StatusId");

                    b.HasIndex("OrderId");

                    b.HasIndex("StatusNameId");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductBrandId")
                        .HasColumnType("int");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("ProductIsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("ProductMainPhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("smallmoney");

                    b.Property<decimal>("ProductRateScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<short>("ProductStock")
                        .HasColumnType("smallint");

                    b.Property<int>("ProductTotalRate")
                        .HasColumnType("int");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductBrandId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.ProductAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeDefinitionId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeDefinitionId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributes");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.ProductPhoto", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhotoId"));

                    b.Property<string>("PhotoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhotoProductId")
                        .HasColumnType("int");

                    b.HasKey("PhotoId");

                    b.HasIndex("PhotoProductId");

                    b.ToTable("ProductPhotos");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.ProductRate", b =>
                {
                    b.Property<int>("ProductRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductRateId"));

                    b.Property<int>("ProductRateProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("ProductRateScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductRateUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductRateId");

                    b.HasIndex("ProductRateProductId");

                    b.HasIndex("ProductRateUserId");

                    b.ToTable("ProductRates");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.ProductTypeAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeDefinitionId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttributeDefinitionId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("ProductTypeAttributes");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemCount")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.StatusName", b =>
                {
                    b.Property<int>("StatusNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusNameId"));

                    b.Property<string>("StatusNameString")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusNameId");

                    b.ToTable("StatusNames");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PCStore.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PCStore.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCStore.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PCStore.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCStore.Domain.Entities.Address", b =>
                {
                    b.HasOne("PCStore.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.Answer", b =>
                {
                    b.HasOne("PCStore.Domain.Entities.Comment", "Comment")
                        .WithMany("Answers")
                        .HasForeignKey("AnswerCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCStore.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("AnswerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.AnswerVote", b =>
                {
                    b.HasOne("PCStore.Domain.Entities.Answer", "Answer")
                        .WithMany("AnswerVotes")
                        .HasForeignKey("AnswerVoteAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCStore.Domain.Entities.User", "User")
                        .WithMany("AnswerVotes")
                        .HasForeignKey("AnswerVoteUserId");

                    b.Navigation("Answer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.Comment", b =>
                {
                    b.HasOne("PCStore.Domain.Entities.Product", "Product")
                        .WithMany("ProductComments")
                        .HasForeignKey("CommentProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCStore.Domain.Entities.User", "User")
                        .WithMany("ProductComments")
                        .HasForeignKey("CommentUserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.CommentVote", b =>
                {
                    b.HasOne("PCStore.Domain.Entities.Comment", "Comment")
                        .WithMany("CommentVotes")
                        .HasForeignKey("CommentVoteCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCStore.Domain.Entities.User", "User")
                        .WithMany("ProductCommentVotes")
                        .HasForeignKey("CommentVoteUserId");

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.CouponUsage", b =>
                {
                    b.HasOne("PCStore.Domain.Entities.Coupon", "Coupon")
                        .WithMany("CouponUsages")
                        .HasForeignKey("CouponUsageCouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCStore.Domain.Entities.Order", "Order")
                        .WithOne("CouponUsage")
                        .HasForeignKey("PCStore.Domain.Entities.CouponUsage", "CouponUsageOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCStore.Domain.Entities.User", "User")
                        .WithMany("CouponUsages")
                        .HasForeignKey("CouponUsageUserId");

                    b.Navigation("Coupon");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.Discount", b =>
                {
                    b.HasOne("PCStore.Domain.Entities.Product", "Product")
                        .WithMany("Discounts")
                        .HasForeignKey("DiscountProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCStore.Domain.Entities.DiscountRate", "DiscountRate")
                        .WithMany("Discounts")
                        .HasForeignKey("DiscountRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscountRate");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.FollowedProduct", b =>
                {
                    b.HasOne("PCStore.Domain.Entities.Product", "Product")
                        .WithMany("FollowedProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCStore.Domain.Entities.User", "User")
                        .WithMany("FollowedProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.Notification", b =>
                {
                    b.HasOne("PCStore.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationUserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.Order", b =>
                {
                    b.HasOne("PCStore.Domain.Entities.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId");

                    b.HasOne("PCStore.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("OrderUserId");

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.OrderProductList", b =>
                {
                    b.HasOne("PCStore.Domain.Entities.Order", "Order")
                        .WithOne("OrderProductList")
                        .HasForeignKey("PCStore.Domain.Entities.OrderProductList", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCStore.Domain.Entities.Product", "Product")
                        .WithMany("OrderProductLists")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.OrderStatus", b =>
                {
                    b.HasOne("PCStore.Domain.Entities.Order", "Order")
                        .WithMany("OrderStatus")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCStore.Domain.Entities.StatusName", "StatusName")
                        .WithMany("OrderStatues")
                        .HasForeignKey("StatusNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("StatusName");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.Product", b =>
                {
                    b.HasOne("PCStore.Domain.Entities.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("ProductBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCStore.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCStore.Domain.Entities.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.ProductAttribute", b =>
                {
                    b.HasOne("PCStore.Domain.Entities.AttributeDefinition", "AttributeDefinition")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("AttributeDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCStore.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeDefinition");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.ProductPhoto", b =>
                {
                    b.HasOne("PCStore.Domain.Entities.Product", "Product")
                        .WithMany("ProductPhotos")
                        .HasForeignKey("PhotoProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.ProductRate", b =>
                {
                    b.HasOne("PCStore.Domain.Entities.Product", "Product")
                        .WithMany("ProductRates")
                        .HasForeignKey("ProductRateProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCStore.Domain.Entities.User", "User")
                        .WithMany("ProductRates")
                        .HasForeignKey("ProductRateUserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.ProductTypeAttribute", b =>
                {
                    b.HasOne("PCStore.Domain.Entities.AttributeDefinition", "AttributeDefinition")
                        .WithMany("ProductTypeAttributes")
                        .HasForeignKey("AttributeDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCStore.Domain.Entities.ProductType", "ProductType")
                        .WithMany("ProductTypeAttributes")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeDefinition");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.ShoppingCartItem", b =>
                {
                    b.HasOne("PCStore.Domain.Entities.Product", "Product")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCStore.Domain.Entities.User", "User")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.Address", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.Answer", b =>
                {
                    b.Navigation("AnswerVotes");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.AttributeDefinition", b =>
                {
                    b.Navigation("ProductAttributes");

                    b.Navigation("ProductTypeAttributes");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.Comment", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("CommentVotes");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.Coupon", b =>
                {
                    b.Navigation("CouponUsages");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.DiscountRate", b =>
                {
                    b.Navigation("Discounts");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.Order", b =>
                {
                    b.Navigation("CouponUsage");

                    b.Navigation("OrderProductList");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.Product", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("FollowedProducts");

                    b.Navigation("OrderProductLists");

                    b.Navigation("ProductComments");

                    b.Navigation("ProductPhotos");

                    b.Navigation("ProductRates");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.ProductType", b =>
                {
                    b.Navigation("ProductTypeAttributes");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.StatusName", b =>
                {
                    b.Navigation("OrderStatues");
                });

            modelBuilder.Entity("PCStore.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("AnswerVotes");

                    b.Navigation("CouponUsages");

                    b.Navigation("FollowedProducts");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("ProductCommentVotes");

                    b.Navigation("ProductComments");

                    b.Navigation("ProductRates");

                    b.Navigation("ShoppingCartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
