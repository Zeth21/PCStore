@page "/cart"
@using PCStore.UI.Components
@using PCStore.UI.Models.Results.CartResults
@inject CartService cartService

<div class="cart-container" style="position: relative">
    <h3 style="align-self:center">My Cart</h3>
    @if (!string.IsNullOrEmpty(appliedCouponCode))
    {
        <div class="applied-coupon-badge">
            <button class="remove-coupon-btn" @onclick="RemoveCoupon">✖</button>
            Kupon Uygulandı: <strong>@appliedCouponCode</strong>
            <span style="display: none">@appliedCouponId</span>
        </div>
    }


    @if (isLoading)
    {
        <p>Loading...</p>
    }
    else if (cartItems is not null)
    {
        <div class="cart-summary">
            <p><strong>Total Cost:</strong> @cartItems.TotalCost ₺</p>

            @if (cartItems.TotalCouponDiscount.HasValue)
            {
                <p><strong>Coupon Discount:</strong> -@cartItems.TotalCouponDiscount ₺</p>
            }

            @if (cartItems.TotalDiscount.HasValue && cartItems.TotalDiscount.Value > 0)
            {
                <p><strong>Product Total Discount:</strong> -@cartItems.TotalDiscount ₺</p>
            }
        </div>

        <div class="coupon-check-section">

            <input type="text" @bind="couponCode" placeholder="Kupon kodu girin..." class="coupon-input" />
            <button class="coupon-button" @onclick="CouponIsValid">Kuponu Kontrol Et</button>
            @if (!string.IsNullOrEmpty(couponMessage))
            {
                <div class="alert-message">@couponMessage</div>
            }
        </div>

        <div class="cart-items-grid">
            @foreach (var item in cartItems.CartItems)
            {
                <ShopCartProduct Item="item" OnRemoved="HandleItemRemoved" />
            }
        </div>
    }
    else
    {
        <p>Sepetiniz boş.</p>
    }
</div>

@code {
    private BulkGetShopCartItemsResult? cartItems;
    private bool isLoading = true;
    private string couponCode = string.Empty;
    private string? couponMessage;

    // Yeni alanlar
    private string? appliedCouponCode;
    private int? appliedCouponId;

    protected override async Task OnInitializedAsync()
    {
        await LoadCartItemsAsync();
    }

    private async Task LoadCartItemsAsync()
    {
        isLoading = true;
        cartItems = await cartService.GetShopCartItemsAsync(appliedCouponId);
        isLoading = false;
        StateHasChanged();
    }

    private async Task HandleItemRemoved(int removedItemId)
    {
        await LoadCartItemsAsync();
    }

    private async Task CouponIsValid()
    {
        if (string.IsNullOrWhiteSpace(couponCode))
        {
            couponMessage = "Lütfen bir kupon kodu girin.";
            return;
        }

        var result = await cartService.CouponIsValidAsync(couponCode);

        if (result is not null)
        {
            couponMessage = result.CouponCode;
            appliedCouponCode = result.CouponCode;
            appliedCouponId = result.CouponId;

            await LoadCartItemsAsync();
        }
        else
        {
            couponMessage = "Kupon geçersiz veya süresi dolmuş.";
            appliedCouponCode = null;
            appliedCouponId = null;
        }
    }
    private async void RemoveCoupon()
    {
        appliedCouponCode = null;
        appliedCouponId = null;
        couponMessage = null;
        couponCode = string.Empty;
        await LoadCartItemsAsync();
    }
}
